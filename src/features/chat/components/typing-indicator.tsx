import React, { useEffect, useState } from 'react';
import { chatApi } from '../api';
import { TypingIndicator } from '../type';
import { appwriteClient } from '@/lib/appwrite-client';
import { DATABASE_ID } from '@/config';

interface TypingIndicatorProps {
  chatsId: string;
  memberId: string;
  typingTimeout?: number; // Th·ªùi gian hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang g√µ (ms)
}

// Component hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang g√µ
export const TypingIndicatorDisplay = ({ 
  chatsId, 
  memberId,
  typingTimeout = 3000 // Default 3 gi√¢y
}: TypingIndicatorProps) => {
  const [typingUsers, setTypingUsers] = useState<Record<string, { name: string; timestamp: Date }>>({});
  
  // X·ª≠ l√Ω s·ª± ki·ªán nh·∫≠n ƒë∆∞·ª£c t·ª´ realtime
  const handleTypingEvent = (data: any) => {
    if (data.chatsId === chatsId && data.memberId !== memberId) {
      if (data.isTyping) {
        // Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch ƒëang g√µ
        setTypingUsers(prev => ({
          ...prev,
          [data.memberId]: {
            name: data.memberName || 'Someone',
            timestamp: new Date(data.timestamp)
          }
        }));
      } else {
        // X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch ƒëang g√µ
        setTypingUsers(prev => {
          const newState = { ...prev };
          delete newState[data.memberId];
          return newState;
        });
      }
    }
  };
  
  // Subscribe v√†o s·ª± ki·ªán typing t·ª´ server
  useEffect(() => {
    if (!chatsId) return;
    
    console.log(`üîÑ Subscribing to typing events for chat ${chatsId}...`);
    
    // K√™nh realtime cho c√°c s·ª± ki·ªán typing
    const typingChannel = `databases.${DATABASE_ID}.typing.${chatsId}`;
    
    // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán realtime
    const unsubscribe = appwriteClient.subscribe(typingChannel, (response) => {
      console.log('Typing event received:', response);
      
      if (response && response.payload) {
        handleTypingEvent(response.payload);
      }
    });
    
    // ƒêƒÉng k√Ω theo chatsId ƒë·ªÉ nh·∫≠n to√†n b·ªô s·ª± ki·ªán c·ªßa chat
    const chatChannel = `databases.${DATABASE_ID}.documents`;
    
    const unsubscribeChat = appwriteClient.subscribe(chatChannel, (response) => {
      if (response && response.payload) {
        const payload = response.payload as any;
        if (payload.chatsId === chatsId) {
          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† s·ª± ki·ªán typing kh√¥ng
          if (payload.isTyping !== undefined) {
            console.log('Typing event from chat channel:', payload);
            handleTypingEvent(payload);
          }
        }
      }
    });
    
    // Clean up typing status sau m·ªôt kho·∫£ng th·ªùi gian
    const interval = setInterval(() => {
      const now = new Date();
      setTypingUsers(prev => {
        const newState = { ...prev };
        let hasChanges = false;
        
        Object.entries(newState).forEach(([memberId, data]) => {
          const diff = now.getTime() - new Date(data.timestamp).getTime();
          if (diff > typingTimeout) {
            delete newState[memberId];
            hasChanges = true;
          }
        });
        
        return hasChanges ? newState : prev;
      });
    }, 1000);
    
    return () => {
      unsubscribe();
      unsubscribeChat();
      clearInterval(interval);
    };
  }, [chatsId, memberId, typingTimeout]);
  
  // Danh s√°ch ng∆∞·ªùi ƒëang g√µ
  const typingUsersList = Object.values(typingUsers);
  
  if (typingUsersList.length === 0) {
    return null;
  }
  
  return (
    <div className="flex items-center text-xs text-muted-foreground italic px-4 py-1 animate-pulse">
      {typingUsersList.length === 1 ? (
        <p>{typingUsersList[0].name} ƒëang g√µ...</p>
      ) : (
        <p>{typingUsersList.length} ng∆∞·ªùi ƒëang g√µ...</p>
      )}
      <span className="ml-1">
        <span className="typing-dot">.</span>
        <span className="typing-dot">.</span>
        <span className="typing-dot">.</span>
      </span>
    </div>
  );
};

// Hook ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i ƒëang g√µ
export function useTypingStatus(chatsId: string, memberId: string) {
  const [isTyping, setIsTyping] = useState(false);
  const [lastTyped, setLastTyped] = useState<number | null>(null);
  
  // H√†m g·ª≠i tr·∫°ng th√°i ƒëang g√µ l√™n server
  const sendTypingStatus = async (typing: boolean) => {
    try {
      if (!chatsId || !memberId) return;
      
      console.log(`Sending typing status (${typing}) for chat ${chatsId}, member ${memberId}`);
      await chatApi.updateTypingStatus(chatsId, memberId, typing);
    } catch (error) {
      console.error('Failed to update typing status:', error);
    }
  };
  
  // H√†m ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng g√µ
  const handleTyping = () => {
    const now = Date.now();
    
    // N·∫øu ch∆∞a t·ª´ng g√µ ho·∫∑c ƒë√£ qua 2 gi√¢y k·ªÉ t·ª´ l·∫ßn g√µ cu·ªëi
    if (!lastTyped || now - lastTyped > 2000) {
      setIsTyping(true);
      sendTypingStatus(true);
      
      // Sau 3 gi√¢y kh√¥ng g√µ, t·ª± ƒë·ªông g·ª≠i tr·∫°ng th√°i kh√¥ng g√µ n·ªØa
      setTimeout(() => {
        setIsTyping(false);
        sendTypingStatus(false);
      }, 3000);
    }
    
    setLastTyped(now);
  };
  
  // Cleanup khi unmount
  useEffect(() => {
    return () => {
      if (isTyping) {
        sendTypingStatus(false);
      }
    };
  }, [isTyping, chatsId, memberId]);
  
  return {
    handleTyping,
    isTyping
  };
} 
"use client";
import { ChatUI } from "@/features/chat/components/chat-ui";
import { useParams } from "next/navigation";
import { Suspense, useState, useEffect, useRef, useCallback } from "react";
import { Skeleton } from "@/components/ui/skeleton";
import { Chats, ChatMembers } from "@/features/chat/type";
import { Button } from "@/components/ui/button";
import { MessageCircle } from "lucide-react";
import { chatApi } from "@/features/chat/api";
import { useRealtimeMessages } from "@/hooks/use-realtime";

export default function ChatPage() {
  const params = useParams();
  const workspaceId = params.workspaceId as string;
  const [selectedChat, setSelectedChat] = useState<Chats & { members?: ChatMembers[] } | null>(null);
  const [memberId, setMemberId] = useState<string>("");
  const [chats, setChats] = useState<(Chats & { members?: ChatMembers[] })[]>([]);
  const [messages, setMessages] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isChatsLoading, setIsChatsLoading] = useState(true);
  const [isSyncing, setIsSyncing] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [workspaceName, setWorkspaceName] = useState<string>("");
  const [isInitializing, setIsInitializing] = useState(false);
  const [syncNotification, setSyncNotification] = useState<string | null>(null);
  const [realtimeStatus, setRealtimeStatus] = useState<string | null>(null);
  const [newMessageNotification, setNewMessageNotification] = useState<string | null>(null);
  const notificationAudioRef = useRef<HTMLAudioElement | null>(null);
  const documentTitle = useRef<string>("");
  const isFocused = useRef<boolean>(true);
  const messageProcessorRef = useRef<((newMessage: any) => void) | null>(null);
  const [pollingStatus, setPollingStatus] = useState<'idle' | 'loading' | 'newMessages' | 'error'>('idle');
  
  // T·∫°o client cho fetch API
  const fetchClient = {
    get: async (url: string) => {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: ${response.status}`);
      }
      const json = await response.json();
      return { data: json.data?.documents || [] };
    }
  };

  // L·∫Øng nghe s·ª± ki·ªán focus v√† blur c·ªßa c·ª≠a s·ªï
  useEffect(() => {
    // Ch·ªâ ch·∫°y ·ªü ph√≠a client
    if (typeof window !== 'undefined') {
      // L∆∞u title ban ƒë·∫ßu
      documentTitle.current = document.title;
      
      // T·∫°o element audio ƒë·ªÉ ph√°t √¢m thanh th√¥ng b√°o
      const audio = new Audio("/notification.mp3");
      notificationAudioRef.current = audio;
      
      const handleFocus = () => {
        isFocused.current = true;
        // Kh√¥i ph·ª•c ti√™u ƒë·ªÅ khi focus v√†o trang
        document.title = documentTitle.current;
      };
      
      const handleBlur = () => {
        isFocused.current = false;
      };
      
      window.addEventListener('focus', handleFocus);
      window.addEventListener('blur', handleBlur);
      
      return () => {
        window.removeEventListener('focus', handleFocus);
        window.removeEventListener('blur', handleBlur);
      };
    }
  }, []);

  // ƒê·ªãnh nghƒ©a message processor callback m·ªôt l·∫ßn
  useEffect(() => {
    // T·∫°o set l∆∞u tr·ªØ tin nh·∫Øn ƒë√£ x·ª≠ l√Ω ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    const processedMessageIds = new Set<string>();
    
    messageProcessorRef.current = (newMessage) => {
      console.log("üîî Nh·∫≠n tin nh·∫Øn m·ªõi qua Realtime:", newMessage);
      
      // T·∫°o ID duy nh·∫•t cho m·ªói tin nh·∫Øn ƒë·ªÉ ki·ªÉm tra tr√πng l·∫∑p
      const messageUniqueId = `${newMessage.$id}_${newMessage.chatsId}`;
      
      // N·∫øu tin nh·∫Øn ƒë√£ x·ª≠ l√Ω th√¨ b·ªè qua
      if (processedMessageIds.has(messageUniqueId)) {
        console.log(`‚è≠Ô∏è B·ªè qua tin nh·∫Øn ƒë√£ x·ª≠ l√Ω qua realtime: ${newMessage.$id}`);
        return;
      }
      
      // ƒê√°nh d·∫•u l√† ƒë√£ x·ª≠ l√Ω
      processedMessageIds.add(messageUniqueId);
      
      // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc c·ªßa set ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ
      if (processedMessageIds.size > 500) {
        // X√≥a b·ªõt 200 ID c≈© nh·∫•t
        const idsArray = Array.from(processedMessageIds);
        processedMessageIds.clear();
        idsArray.slice(200).forEach(id => processedMessageIds.add(id));
      }
      
      // Ki·ªÉm tra xem tin nh·∫Øn m·ªõi c√≥ ph·∫£i ƒë√£ c√≥ trong danh s√°ch kh√¥ng
      // S·ª≠ d·ª•ng h√†m callback ƒë·ªÉ ƒë·∫£m b·∫£o truy c·∫≠p state messages m·ªõi nh·∫•t
      setMessages((prevMessages) => {
        // Ki·ªÉm tra xem tin nh·∫Øn ƒë√£ t·ªìn t·∫°i ch∆∞a b·∫±ng ID
        if (prevMessages.some((msg) => msg.$id === newMessage.$id)) {
          console.log(`‚è≠Ô∏è B·ªè qua tin nh·∫Øn ƒë√£ c√≥ trong danh s√°ch: ${newMessage.$id}`);
          return prevMessages;
        }
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i tin nh·∫Øn t·∫°m th·ªùi kh√¥ng
        const isTempMessage = prevMessages.some(
          (msg) => msg.content === newMessage.content && 
                   msg.memberId === newMessage.memberId && 
                   msg.$id.startsWith('temp-')
        );
        
        if (isTempMessage) {
          console.log(`‚ö†Ô∏è Ph√°t hi·ªán tin nh·∫Øn t·∫°m th·ªùi, thay th·∫ø b·∫±ng tin nh·∫Øn th·∫≠t: ${newMessage.$id}`);
          // L·ªçc ra tin nh·∫Øn t·∫°m th·ªùi c√≥ c√πng n·ªôi dung v√† ng∆∞·ªùi g·ª≠i
          const filteredMessages = prevMessages.filter(
            msg => !(msg.content === newMessage.content && 
                    msg.memberId === newMessage.memberId && 
                    msg.$id.startsWith('temp-'))
          );
          
          // Th√™m tin nh·∫Øn m·ªõi v√†o
          const updatedMessages = [...filteredMessages, newMessage];
          
          // ƒê·∫£m b·∫£o tin nh·∫Øn ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian
          return updatedMessages.sort((a, b) => {
            const timeA = new Date(a.CreatedAt || a.$createdAt).getTime();
            const timeB = new Date(b.CreatedAt || b.$createdAt).getTime();
            return timeA - timeB;
          });
        }
        
        console.log(`‚úÖ Th√™m tin nh·∫Øn m·ªõi v√†o danh s√°ch: ${newMessage.$id}`);
        
        // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i kh√¥ng
        const isFromCurrentUser = newMessage.memberId === memberId;
        
        if (!isFromCurrentUser) {
          // Hi·ªÉn th·ªã th√¥ng b√°o khi c√≥ tin nh·∫Øn m·ªõi t·ª´ ng∆∞·ªùi kh√°c
          const senderName = newMessage.senderName || 'Ai ƒë√≥';
          setNewMessageNotification(`Tin nh·∫Øn m·ªõi t·ª´ ${senderName}`);
          
          // Ph√°t √¢m thanh th√¥ng b√°o
          if (notificationAudioRef.current) {
            notificationAudioRef.current.play().catch(e => console.log("Kh√¥ng th·ªÉ ph√°t √¢m thanh: ", e));
          }
          
          // Thay ƒë·ªïi ti√™u ƒë·ªÅ trang n·∫øu ng∆∞·ªùi d√πng kh√¥ng ·ªü tab n√†y
          if (!isFocused.current && typeof document !== 'undefined') {
            document.title = `(1) Tin nh·∫Øn m·ªõi - ${documentTitle.current}`;
          }
          
          // ·∫®n th√¥ng b√°o sau 5 gi√¢y
          setTimeout(() => {
            setNewMessageNotification(null);
          }, 5000);
        }
        
        // B·ªï sung th√¥ng tin ng∆∞·ªùi g·ª≠i n·∫øu c√≥
        let enrichedMessage = { ...newMessage };
        
        // N·∫øu c√≥ t√™n ng∆∞·ªùi g·ª≠i t·ª´ realtime, s·ª≠ d·ª•ng n√≥
        if (newMessage.senderName) {
          console.log(`üë§ Tin nh·∫Øn t·ª´: ${newMessage.senderName}`);
        }
        
        // Th√™m tin nh·∫Øn m·ªõi v√†o cu·ªëi danh s√°ch (th·ª© t·ª± tƒÉng d·∫ßn theo th·ªùi gian)
        const updatedMessages = [...prevMessages, enrichedMessage];
        
        // ƒê·∫£m b·∫£o tin nh·∫Øn ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian
        return updatedMessages.sort((a, b) => {
          const timeA = new Date(a.CreatedAt || a.$createdAt).getTime();
          const timeB = new Date(b.CreatedAt || b.$createdAt).getTime();
          return timeA - timeB;
        });
      });
      
      // Scroll xu·ªëng d∆∞·ªõi c√πng khi c√≥ tin nh·∫Øn m·ªõi
      if (typeof window !== 'undefined') {
        setTimeout(() => {
          const messagesEndElement = document.getElementById('messages-end');
          if (messagesEndElement) {
            messagesEndElement.scrollIntoView({ behavior: 'smooth' });
          }
        }, 100);
      }
    };
  }, [memberId]);

  // S·ª≠ d·ª•ng hook realtime ƒë·ªÉ nh·∫≠n tin nh·∫Øn m·ªõi - lu√¥n g·ªçi v·ªõi callback wrapper
  const { isConnected } = useRealtimeMessages(
    selectedChat?.$id || null,
    (newMessage) => {
      if (messageProcessorRef.current) {
        messageProcessorRef.current(newMessage);
      }
    }
  );

  // Hi·ªÉn th·ªã tr·∫°ng th√°i realtime khi k·∫øt n·ªëi thay ƒë·ªïi
  useEffect(() => {
    if (isConnected && selectedChat) {
      setRealtimeStatus("Realtime ƒë√£ k·∫øt n·ªëi");
      // ·∫®n th√¥ng b√°o sau 3 gi√¢y
      const timer = setTimeout(() => {
        setRealtimeStatus(null);
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [isConnected, selectedChat]);

  // Th√™m c∆° ch·∫ø polling ƒë·ªÉ t·ª± ƒë·ªông t·∫£i tin nh·∫Øn m·ªõi ƒë·ªãnh k·ª≥
  // Gi·∫£i ph√°p n√†y ƒë·∫∑c bi·ªát h·ªØu √≠ch khi l√†m vi·ªác v·ªõi localhost ho·∫∑c khi Realtime kh√¥ng ho·∫°t ƒë·ªông
  useEffect(() => {
    if (!selectedChat || !selectedChat.$id) return;

    // Kh·ªüi t·∫°o title khi component mount
    if (typeof window !== 'undefined' && documentTitle.current === "") {
      documentTitle.current = document.title;
    }

    // H√†m ƒë·ªÉ l·∫•y tin nh·∫Øn m·ªõi nh·∫•t
    const fetchLatestMessages = async () => {
      if (!selectedChat || !selectedChat.$id) return;
      
      try {
        setPollingStatus('loading');
        console.log("üîÑ ƒêang polling tin nh·∫Øn m·ªõi...");
        
        // L·∫•y tin nh·∫Øn m·ªõi t·ª´ API
        const response: any = await fetchClient.get(
          `/api/chats/${selectedChat.$id}/messages`
        );
        
        const fetchedMessages = response.data;
        if (!fetchedMessages || !Array.isArray(fetchedMessages) || fetchedMessages.length === 0) {
          console.log("‚ÑπÔ∏è Kh√¥ng c√≥ tin nh·∫Øn m·ªõi khi polling");
          setPollingStatus('idle');
          return;
        }
        
        // ƒê·∫£m b·∫£o c√°c tin nh·∫Øn ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian
        const sortedMessages = fetchedMessages.sort((a, b) => {
          const timeA = new Date(a.CreatedAt || a.$createdAt).getTime();
          const timeB = new Date(b.CreatedAt || b.$createdAt).getTime();
          return timeA - timeB;
        });
        
        // X·ª≠ l√Ω tin nh·∫Øn m·ªõi ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        let hasNewMessages = false;
        
        setMessages((prevMessages) => {
          // T√¨m tin nh·∫Øn ch∆∞a c√≥ trong danh s√°ch hi·ªán t·∫°i
          const newMessages = sortedMessages.filter((newMsg) => {
            // Ki·ªÉm tra b·∫±ng ID
            const existsById = prevMessages.some(msg => msg.$id === newMsg.$id);
            if (existsById) return false;
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i tin nh·∫Øn t·∫°m th·ªùi kh√¥ng
            const isTempVersion = prevMessages.some(
              msg => msg.content === newMsg.content && 
                    msg.memberId === newMsg.memberId && 
                    msg.$id.startsWith('temp-')
            );
            
            // N·∫øu l√† tin nh·∫Øn m·ªõi ho√†n to√†n, ƒë√°nh d·∫•u l√† c√≥ tin nh·∫Øn m·ªõi
            if (!isTempVersion) {
              hasNewMessages = true;
            }
            
            return true;
          });
          
          // N·∫øu kh√¥ng c√≥ tin nh·∫Øn m·ªõi, gi·ªØ nguy√™n danh s√°ch c≈©
          if (newMessages.length === 0) {
            console.log("‚ÑπÔ∏è Kh√¥ng ph√°t hi·ªán tin nh·∫Øn m·ªõi trong k·∫øt qu·∫£ polling");
            return prevMessages;
          }
          
          console.log(`üì• T√¨m th·∫•y ${newMessages.length} tin nh·∫Øn m·ªõi khi polling`);
          
          // K·∫øt h·ª£p tin nh·∫Øn m·ªõi v√† tin nh·∫Øn hi·ªán t·∫°i, lo·∫°i b·ªè tin nh·∫Øn t·∫°m
          let mergedMessages = [...prevMessages];
          
          // Th√™m t·ª´ng tin nh·∫Øn m·ªõi v√† x·ª≠ l√Ω tin nh·∫Øn t·∫°m th·ªùi
          newMessages.forEach(newMsg => {
            // T√¨m tin nh·∫Øn t·∫°m c√≥ n·ªôi dung t∆∞∆°ng t·ª± ƒë·ªÉ thay th·∫ø
            const tempIndex = mergedMessages.findIndex(
              msg => msg.content === newMsg.content && 
                    msg.memberId === newMsg.memberId && 
                    msg.$id.startsWith('temp-')
            );
            
            if (tempIndex !== -1) {
              // Thay th·∫ø tin nh·∫Øn t·∫°m b·∫±ng tin nh·∫Øn th·∫≠t
              console.log(`üîÑ Thay th·∫ø tin nh·∫Øn t·∫°m ${mergedMessages[tempIndex].$id} b·∫±ng tin nh·∫Øn th·∫≠t ${newMsg.$id}`);
              mergedMessages[tempIndex] = newMsg;
            } else {
              // Th√™m tin nh·∫Øn m·ªõi v√†o cu·ªëi
              mergedMessages.push(newMsg);
            }
          });
          
          // L·ªçc b·ªè tr√πng l·∫∑p theo ID (ph√≤ng tr∆∞·ªùng h·ª£p)
          const uniqueMessages = mergedMessages.filter((msg, index, self) => 
            index === self.findIndex(m => m.$id === msg.$id)
          );
          
          // S·∫Øp x·∫øp tin nh·∫Øn theo th·ªùi gian
          return uniqueMessages.sort((a, b) => {
            const timeA = new Date(a.CreatedAt || a.$createdAt).getTime();
            const timeB = new Date(b.CreatedAt || b.$createdAt).getTime();
            return timeA - timeB;
          });
        });
        
        // N·∫øu c√≥ tin nh·∫Øn m·ªõi (kh√¥ng ph·∫£i thay th·∫ø tin nh·∫Øn t·∫°m th·ªùi)
        if (hasNewMessages) {
          // Hi·ªÉn th·ªã th√¥ng b√°o khi ph√°t hi·ªán tin nh·∫Øn m·ªõi 
          setPollingStatus('newMessages');
          
          // Ch·ªâ ph√°t √¢m thanh v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
          const newMessagesFromOthers = sortedMessages.some(msg => 
            msg.memberId !== memberId && 
            !messages.some(existingMsg => existingMsg.$id === msg.$id)
          );
          
          if (newMessagesFromOthers) {
            console.log("üîî Ph√°t hi·ªán tin nh·∫Øn m·ªõi t·ª´ ng∆∞·ªùi kh√°c qua polling");
            // Ph√°t √¢m thanh th√¥ng b√°o n·∫øu ng∆∞·ªùi d√πng kh√¥ng ·ªü tab hi·ªán t·∫°i
            if (!isFocused.current && notificationAudioRef.current) {
              notificationAudioRef.current.play().catch(e => console.log("Kh√¥ng th·ªÉ ph√°t √¢m thanh: ", e));
            }
            
            // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ trang
            if (!isFocused.current && typeof document !== 'undefined') {
              document.title = `(1) Tin nh·∫Øn m·ªõi - ${documentTitle.current}`;
            }
          }
          
          // T·ª± ƒë·ªông reset tr·∫°ng th√°i sau 2 gi√¢y
          setTimeout(() => {
            setPollingStatus('idle');
          }, 2000);
        } else {
          setPollingStatus('idle');
        }
        
        // Scroll xu·ªëng khi c√≥ tin nh·∫Øn m·ªõi
        if (hasNewMessages && typeof window !== 'undefined') {
          setTimeout(() => {
            const messagesEndElement = document.getElementById('messages-end');
            if (messagesEndElement) {
              messagesEndElement.scrollIntoView({ behavior: 'smooth' });
            }
          }, 100);
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi polling tin nh·∫Øn:", error);
        setPollingStatus('error');
        setTimeout(() => {
          setPollingStatus('idle');
        }, 2000);
      }
    };
    
    // T·∫£i tin nh·∫Øn m·ªõi ngay khi ch·ªçn chat
    fetchLatestMessages();
    
    // Thi·∫øt l·∫≠p interval ƒë·ªÉ t·ª± ƒë·ªông t·∫£i tin nh·∫Øn m·ªõi sau 3 gi√¢y
    const pollingInterval = setInterval(fetchLatestMessages, 3000);
    
    // X√≥a interval khi component unmount ho·∫∑c khi chat thay ƒë·ªïi
    return () => clearInterval(pollingInterval);
  }, [selectedChat, messages, memberId]);

  // Fetch member ID
  useEffect(() => {
    if (!workspaceId) return;

    const fetchMemberId = async () => {
      try {
        const response = await fetch(`/api/members/me?workspaceId=${workspaceId}`);
        
        if (response.status === 404) {
          // User is not a member of this workspace
          setError("You are not a member of this workspace. Please join the workspace to access chat.");
          setIsLoading(false);
          return;
        }
        
        if (!response.ok) {
          throw new Error(`Failed to fetch member: ${response.status}`);
        }
        
        const data = await response.json();
        if (data.data) {
          setMemberId(data.data.$id);
          // L·∫•y t√™n workspace t·ª´ member data n·∫øu c√≥
          if (data.data.workspaceName) {
            setWorkspaceName(data.data.workspaceName);
          }
        } else {
          throw new Error("No member data received");
        }
      } catch (error) {
        console.error("Error fetching member:", error);
        setError(`Could not get member information: ${error instanceof Error ? error.message : 'Unknown error'}`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchMemberId();
  }, [workspaceId]);

  // Fetch chats
  useEffect(() => {
    if (!workspaceId || isInitializing) return;

    let isMounted = true; // Theo d√µi component c√≤n mounted kh√¥ng
    let isCreatingChat = false; // Bi·∫øn c·ªù ki·ªÉm so√°t qu√° tr√¨nh t·∫°o chat

    const fetchChats = async () => {
      if (isCreatingChat) return; // Tr√°nh g·ªçi nhi·ªÅu l·∫ßn khi ƒëang t·∫°o chat

      try {
        setIsChatsLoading(true);
        const response = await fetch(`/api/chats?workspaceId=${workspaceId}`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch chats: ${response.status}`);
        }
        
        const data = await response.json();
        if (data.data && data.data.documents && isMounted) {
          console.log("Fetched chats before deduplication:", data.data.documents.length);
          
          // Lo·∫°i b·ªè c√°c chat tr√πng l·∫∑p b·∫±ng c√°ch d√πng Map v·ªõi $id l√† key
          const uniqueChatsMap = new Map();
          data.data.documents.forEach((chat: Chats) => {
            // Ch·ªâ th√™m v√†o n·∫øu chat ch∆∞a t·ªìn t·∫°i trong Map ho·∫∑c ghi ƒë√® n·∫øu ƒë√£ t·ªìn t·∫°i
            uniqueChatsMap.set(chat.$id, chat);
          });
          
          // Chuy·ªÉn ƒë·ªïi Map th√†nh m·∫£ng
          const uniqueChats = Array.from(uniqueChatsMap.values());
          console.log("Unique chats after deduplication:", uniqueChats.length);
          
          // C·∫≠p nh·∫≠t documents v·ªõi m·∫£ng ƒë√£ ƒë∆∞·ª£c l·ªçc b·ªè tr√πng l·∫∑p
          data.data.documents = uniqueChats;
          
          // Ki·ªÉm tra c√≥ nh√≥m chat n√†o kh√¥ng
          const hasGroupChat = uniqueChats.some(
            (chat: Chats) => chat.isGroup === true
          );
          
          // T·∫°o nh√≥m chat m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ v√† ƒë√£ c√≥ memberId
          if (!hasGroupChat && memberId && !isCreatingChat && isMounted) {
            // ƒê√°nh d·∫•u ƒëang t·∫°o chat ƒë·ªÉ tr√°nh t·∫°o nhi·ªÅu l·∫ßn
            isCreatingChat = true;
            setIsInitializing(true);

            try {
              console.log("B·∫Øt ƒë·∫ßu t·∫°o nh√≥m chat m·∫∑c ƒë·ªãnh cho workspace:", workspaceId);
              
              // Ki·ªÉm tra l·∫ßn n·ªØa xem ƒë√£ c√≥ chat nh√≥m ch∆∞a ƒë·ªÉ tr√°nh race condition
              const doubleCheckResponse = await fetch(`/api/chats?workspaceId=${workspaceId}`);
              if (doubleCheckResponse.ok) {
                const doubleCheckData = await doubleCheckResponse.json();
                const hasGroup = doubleCheckData.data?.documents?.some(
                  (chat: Chats) => chat.isGroup === true
                );
                
                if (hasGroup) {
                  console.log("Ph√°t hi·ªán nh√≥m chat ƒë√£ t·ªìn t·∫°i trong l·∫ßn ki·ªÉm tra th·ª© hai, h·ªßy t·∫°o m·ªõi");
                  if (isMounted) {
                    setIsInitializing(false);
                    // T·∫£i l·∫°i chat
                    fetchChats();
                  }
                  return;
                }
              }
              
              // L·∫•y th√¥ng tin workspace ƒë·ªÉ l·∫•y t√™n ch√≠nh x√°c
              const wsResponse = await fetch(`/api/workspaces/${workspaceId}`);
              
              let chatName = "Nh√≥m chung";
              
              if (wsResponse.ok) {
                const workspaceData = await wsResponse.json();
                if (workspaceData?.data?.name) {
                  chatName = workspaceData.data.name;
                }
              } else {
                console.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin workspace");
              }
              
              // S·ª≠ d·ª•ng API initialize-default thay v√¨ t·ª± t·∫°o chat
              const initResponse = await fetch('/api/chats/initialize-default', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  workspaceId,
                  workspaceName: chatName
                }),
              });
              
              if (!initResponse.ok) {
                throw new Error(`Failed to initialize default chat: ${initResponse.status}`);
              }
              
              const initData = await initResponse.json();
              console.log("K·∫øt qu·∫£ kh·ªüi t·∫°o nh√≥m chat m·∫∑c ƒë·ªãnh:", initData);
              
              if (isMounted) {
                // T·∫£i l·∫°i danh s√°ch chat sau khi t·∫°o chat m·∫∑c ƒë·ªãnh
                const refreshResponse = await fetch(`/api/chats?workspaceId=${workspaceId}`);
                if (refreshResponse.ok) {
                  const refreshData = await refreshResponse.json();
                  if (refreshData.data && refreshData.data.documents) {
                    // Lo·∫°i b·ªè tr√πng l·∫∑p m·ªôt l·∫ßn n·ªØa
                    const refreshedChats = Array.from(
                      new Map(refreshData.data.documents.map((chat: Chats) => [chat.$id, chat])).values()
                    ) as (Chats & { members?: ChatMembers[] })[];
                    setChats(refreshedChats);
                    
                    // T·ª± ƒë·ªông ch·ªçn chat nh√≥m
                    const defaultGroupChat = refreshedChats.find(
                      (chat: Chats) => chat.isGroup === true
                    );
                    
                    if (defaultGroupChat) {
                      setSelectedChat(defaultGroupChat);
                    } else if (refreshedChats.length > 0) {
                      setSelectedChat(refreshedChats[0]);
                    }
                  }
                }
              }
            } catch (error) {
              console.error("Error creating default chat:", error);
            } finally {
              if (isMounted) {
                setIsInitializing(false);
                isCreatingChat = false;
              }
            }
          } else {
            if (isMounted) {
              // L∆∞u chats v√†o state
              setChats(data.data.documents);
              
              // N·∫øu c√≥ chat v√† ch∆∞a ch·ªçn chat n√†o, ch·ªçn chat ƒë·∫ßu ti√™n
              if (data.data.documents.length > 0 && !selectedChat) {
                // ∆Øu ti√™n ch·ªçn nh√≥m chat (group chat)
                const defaultGroupChat = data.data.documents.find(
                  (chat: Chats) => chat.isGroup === true
                );
                
                if (defaultGroupChat) {
                  setSelectedChat(defaultGroupChat);
                } else if (data.data.documents.length > 0) {
                  setSelectedChat(data.data.documents[0]);
                }
              }
            }
          }
        }
      } catch (error) {
        if (isMounted) {
          setError(`Could not load chats: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      } finally {
        if (isMounted) {
          setIsChatsLoading(false);
        }
      }
    };

    fetchChats();

    return () => {
      isMounted = false; // Cleanup function ƒë·ªÉ tr√°nh setState sau khi unmount
    };
  }, [workspaceId, memberId, isInitializing, selectedChat]);

  // Fetch messages when a chat is selected
  useEffect(() => {
    if (!selectedChat?.$id) {
      setMessages([]);
      return;
    }

    const fetchMessages = async () => {
      try {
        const response = await fetch(`/api/chats/${selectedChat.$id}/messages`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch messages: ${response.status}`);
        }
        
        const data = await response.json();
        if (data.data && data.data.documents) {
          // S·∫Øp x·∫øp tin nh·∫Øn theo th·ª© t·ª± tƒÉng d·∫ßn th·ªùi gian (tin nh·∫Øn c≈© nh·∫•t l√™n tr√™n)
          const sortedMessages = [...data.data.documents].sort((a, b) => {
            const timeA = new Date(a.CreatedAt || a.$createdAt).getTime();
            const timeB = new Date(b.CreatedAt || b.$createdAt).getTime();
            return timeA - timeB;
          });
          setMessages(sortedMessages);
        }
      } catch (error) {
        console.error(`Could not load messages: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    };

    fetchMessages();
  }, [selectedChat?.$id]);

  const handleSelectChat = (chat: Chats & { members?: ChatMembers[] }) => {
    setSelectedChat(chat);
  };

  const handleSyncMembers = async () => {
    if (!selectedChat?.$id || isSyncing) return;
    
    setIsSyncing(true);
    setSyncNotification(null);
    
    console.log("ƒêang ƒë·ªìng b·ªô th√†nh vi√™n cho chat:", {
      chatId: selectedChat.$id,
      chatName: selectedChat.name,
      currentMembers: selectedChat.members,
      workspaceId
    });
    
    try {
      const response = await chatApi.syncMembers(selectedChat.$id, workspaceId);
      
      if (!response.data) {
        throw new Error("Failed to sync members");
      }
      
      console.log("K·∫øt qu·∫£ ƒë·ªìng b·ªô th√†nh vi√™n:", response.data);
      
      setSyncNotification(response.data.message || "ƒê√£ ƒë·ªìng b·ªô th√†nh vi√™n.");
      
      const chatsData = await chatApi.getChats(workspaceId);
      
      if (chatsData?.data?.documents) {
        // Lo·∫°i b·ªè c√°c chat tr√πng l·∫∑p
        const uniqueChats = Array.from(
          new Map(chatsData.data.documents.map((chat: Chats) => [chat.$id, chat])).values()
        );
        
        console.log("Danh s√°ch chat sau khi ƒë·ªìng b·ªô:", {
          total: uniqueChats.length,
          chats: uniqueChats.map((chat: any) => ({
            id: chat.$id,
            name: chat.name,
            isGroup: chat.isGroup,
            membersCount: chat.members?.length || 0
          }))
        });
        
        setChats(uniqueChats);
        
        const updatedSelectedChat = uniqueChats.find(
          (chat: Chats) => chat.$id === selectedChat.$id
        );
        
        if (updatedSelectedChat) {
          console.log("C·∫≠p nh·∫≠t chat ƒë∆∞·ª£c ch·ªçn sau khi ƒë·ªìng b·ªô:", {
            id: updatedSelectedChat.$id,
            name: updatedSelectedChat.name,
            membersCount: updatedSelectedChat.members?.length || 0
          });
          
          setSelectedChat(updatedSelectedChat);
        }
      }
      
      setTimeout(() => {
        setSyncNotification(null);
      }, 5000);
    } catch (error) {
      console.error("Error syncing members:", error);
      setError(`Failed to sync members: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsSyncing(false);
    }
  };

  const handleSendMessage = async (content: string, file?: File) => {
    if (!selectedChat?.$id || (!content.trim() && !file)) return;
    
    setIsSending(true);
    
    // T·∫°o ID t·∫°m th·ªùi v·ªõi th·ªùi gian ƒë·ªÉ ƒë·∫£m b·∫£o duy nh·∫•t
    const tempId = `temp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
    
    // T·∫°o t·∫°m m·ªôt tin nh·∫Øn ƒë·ªÉ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
    const tempMessage = {
      $id: tempId,
      memberId,
      chatsId: selectedChat.$id,
      content: content,
      CreatedAt: new Date().toISOString(),
      $createdAt: new Date().toISOString(),
      $updatedAt: new Date().toISOString(),
      // Th√™m t√™n ng∆∞·ªùi g·ª≠i ƒë·ªÉ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
      senderName: "B·∫°n"
    };
    
    // Th√™m tin nh·∫Øn t·∫°m th·ªùi v√†o danh s√°ch ngay l·∫≠p t·ª©c ƒë·ªÉ UX nhanh h∆°n
    setMessages((prevMessages) => {
      const updatedMessages = [...prevMessages, tempMessage];
      
      // ƒê·∫£m b·∫£o tin nh·∫Øn ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian
      return updatedMessages.sort((a, b) => {
        const timeA = new Date(a.CreatedAt || a.$createdAt).getTime();
        const timeB = new Date(b.CreatedAt || b.$createdAt).getTime();
        return timeA - timeB;
      });
    });
    
    // Scroll to newest message
    if (typeof window !== 'undefined') {
      setTimeout(() => {
        const messagesEndElement = document.getElementById('messages-end');
        if (messagesEndElement) {
          messagesEndElement.scrollIntoView({ behavior: 'smooth' });
        }
      }, 100);
    }
    
    try {
      // Ch·ªâ g·ª≠i tin nh·∫Øn, kh√¥ng c·∫≠p nh·∫≠t th√†nh vi√™n
      let messageResponse;
      
      if (file) {
        // Handle file upload
        const formData = new FormData();
        formData.append('file', file);
        formData.append('chatsId', selectedChat.$id);
        formData.append('memberId', memberId);
        
        messageResponse = await fetch('/api/chats/upload', {
          method: 'POST',
          body: formData
        });
      } else {
        // G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
        const response = await fetch(`/api/chats/${selectedChat.$id}/messages`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            memberId,
            content,
            chatsId: selectedChat.$id,
          })
        });
        
        messageResponse = response;
      }
      
      if (!messageResponse.ok) {
        throw new Error(`Failed to send message: ${messageResponse.status}`);
      }
      
      const data = await messageResponse.json();
      
      if (data.data) {
        console.log("‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i:", data.data);
        
        // Thay th·∫ø tin nh·∫Øn t·∫°m th·ªùi b·∫±ng tin nh·∫Øn th·∫≠t t·ª´ server
        setMessages((prevMessages) => {
          // T·∫°o m·∫£ng m·ªõi kh√¥ng bao g·ªìm tin nh·∫Øn t·∫°m th·ªùi
          const filteredMessages = prevMessages.filter(msg => msg.$id !== tempId);
          
          // Ki·ªÉm tra xem tin nh·∫Øn t·ª´ server ƒë√£ t·ªìn t·∫°i trong danh s√°ch ch∆∞a
          const messageExists = filteredMessages.some(msg => msg.$id === data.data.$id);
          
          // N·∫øu ch∆∞a t·ªìn t·∫°i, th√™m v√†o
          if (!messageExists) {
            const updatedMessages = [...filteredMessages, data.data];
            // ƒê·∫£m b·∫£o tin nh·∫Øn ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian
            return updatedMessages.sort((a, b) => {
              const timeA = new Date(a.CreatedAt || a.$createdAt).getTime();
              const timeB = new Date(b.CreatedAt || b.$createdAt).getTime();
              return timeA - timeB;
            });
          }
          
          return filteredMessages;
        });
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
      
      // N·∫øu l·ªói, x√≥a tin nh·∫Øn t·∫°m
      setMessages((prevMessages) => 
        prevMessages.filter(msg => msg.$id !== tempId)
      );
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      alert("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsSending(false);
    }
  };

  const handleRetry = () => {
    setError(null);
    setIsLoading(true);
    setIsChatsLoading(true);
    
    // Trigger reloading data by forcing the useEffects to run again
    if (workspaceId) {
      // The member ID and chats fetching logic is in useEffects
      // Just reset the states, and the effects will handle the fetching
      setMemberId("");
      setChats([]);
    }
  };

  // Function to handle joining workspace
  const handleJoinWorkspace = async () => {
    // This is a placeholder for joining workspace functionality
    // You would need to implement this based on your workspace join process
    try {
      alert("Please implement workspace joining functionality");
      // Example implementation would be something like:
      // await fetch(`/api/workspaces/${workspaceId}/join`, {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ code: 'invite-code-here' }),
      // });
      // Then retry loading
      handleRetry();
    } catch (error) {
      console.error("Error joining workspace:", error);
      setError("Failed to join workspace. Please try again.");
    }
  };

  return (
    <div className="p-4 lg:p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold tracking-tight">Chat {workspaceName && `- ${workspaceName}`}</h1>
        <div className="flex items-center gap-2">
          {/* Hi·ªÉn th·ªã tr·∫°ng th√°i polling v√† realtime */}
          {pollingStatus === 'newMessages' && (
            <div className="text-sm text-green-600 dark:text-green-500 bg-green-100 dark:bg-green-900/30 px-3 py-1 rounded-full flex items-center">
              <span className="h-2 w-2 rounded-full bg-green-500 mr-2 animate-pulse"></span>
              Tin nh·∫Øn m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫£i
            </div>
          )}
          
          {pollingStatus === 'loading' && (
            <div className="text-sm text-blue-600 dark:text-blue-500 bg-blue-100 dark:bg-blue-900/30 px-3 py-1 rounded-full flex items-center">
              <span className="h-2 w-2 rounded-full bg-blue-500 mr-2 animate-pulse"></span>
              ƒêang ki·ªÉm tra tin nh·∫Øn m·ªõi...
            </div>
          )}
          
          {pollingStatus === 'error' && (
            <div className="text-sm text-red-600 dark:text-red-500 bg-red-100 dark:bg-red-900/30 px-3 py-1 rounded-full flex items-center">
              <span className="h-2 w-2 rounded-full bg-red-500 mr-2"></span>
              L·ªói c·∫≠p nh·∫≠t tin nh·∫Øn
            </div>
          )}
          
          {newMessageNotification && (
            <div className="text-sm text-yellow-600 dark:text-yellow-500 bg-yellow-100 dark:bg-yellow-900/30 px-3 py-1 rounded-full flex items-center animate-pulse">
              <span className="h-2 w-2 rounded-full bg-yellow-500 mr-2"></span>
              {newMessageNotification}
            </div>
          )}
          
          {realtimeStatus && (
            <div className="text-sm text-purple-600 dark:text-purple-500 bg-purple-100 dark:bg-purple-900/30 px-3 py-1 rounded-full flex items-center">
              <span className="animate-pulse h-2 w-2 rounded-full bg-purple-500 mr-2"></span>
              {realtimeStatus}
            </div>
          )}
        </div>
      </div>
      
      {/* Audio cho th√¥ng b√°o tin nh·∫Øn m·ªõi */}
      <audio
        ref={notificationAudioRef}
        src="/sounds/notification.mp3"
        preload="auto"
      />
      
      <Suspense fallback={<ChatSkeleton />}>
        {error && error.includes("not a member") ? (
          <div className="h-full flex flex-col items-center justify-center p-8">
            <div className="mb-6 p-4 rounded-full bg-muted">
              <MessageCircle className="h-8 w-8 text-primary" />
            </div>
            <h2 className="text-2xl font-semibold mb-4">Join Workspace to Chat</h2>
            <p className="text-muted-foreground text-center max-w-md mb-6">
              You need to be a member of this workspace to access the chat feature.
            </p>
            <div className="flex gap-4">
              <Button onClick={handleJoinWorkspace} className="gap-2">
                Join Workspace
              </Button>
              <Button variant="outline" onClick={() => window.history.back()}>
                Go Back
              </Button>
            </div>
          </div>
        ) : (
          <ChatUI 
            workspaceId={workspaceId}
            selectedChat={selectedChat}
            memberId={memberId}
            chats={chats}
            isLoading={isLoading || isInitializing}
            isChatsLoading={isChatsLoading}
            isSyncing={isSyncing}
            error={error}
            syncNotification={syncNotification}
            onSelectChat={handleSelectChat}
            onSyncMembers={handleSyncMembers}
            onRetry={handleRetry}
            onSendMessage={handleSendMessage}
            messages={messages}
            isSending={isSending}
            isRealtimeConnected={isConnected}
          />
        )}
      </Suspense>
    </div>
  );
}

// Skeleton loader for chat interface
function ChatSkeleton() {
  return (
    <div className="flex h-[calc(100vh-120px)] gap-4">
      <Skeleton className="w-80 h-full" />
      <Skeleton className="flex-1 h-full" />
    </div>
  );
}